name: Windows Server 2025 VM with Tailscale and RDP

on: [push]

env:
  VM_NAME: WinServer2025-Tailscale-RDP
  VM_RAM: 64GB
  VM_DISK: C:\HyperV\VirtualHardDisks\WinServer2025-Tailscale-RDP.vhdx
  VM_DISK_SIZE_BYTES: 1099511627776  # 1 TB în bytes
  VM_CPU_COUNT: 8
  VM_OS_ISO: C:\temp\WinServer2025_x64.iso
  ISO_DOWNLOAD_URL: "https://link-to-your-cloud/WinServer2025_x64.iso" # Modifică după link-ul tău
  TAILSCALE_AUTHKEY: ${{ secrets.TAILSCALE_AUTHKEY }}

jobs:
  setup-vm:
    runs-on: windows-latest

    steps:
      - name: Download Windows Server 2025 ISO
        shell: powershell
        run: |
          $url = "${env:ISO_DOWNLOAD_URL}"
          $outputPath = "${env:VM_OS_ISO}"
          Invoke-WebRequest -Uri $url -OutFile $outputPath -UseBasicParsing
          Write-Output "ISO downloaded to $outputPath"

      - name: Create and start VM
        shell: powershell
        id: vm
        run: |
          if (-not (Test-Path (Split-Path $env:VM_DISK))) {
            New-Item -ItemType Directory -Force -Path (Split-Path $env:VM_DISK)
          }
          New-VHD -Path $env:VM_DISK -SizeBytes $env:VM_DISK_SIZE_BYTES -Dynamic
          New-VM -Name $env:VM_NAME -MemoryStartupBytes $env:VM_RAM -Generation 2 -NewVHDPath $env:VM_DISK
          Set-VMProcessor -VMName $env:VM_NAME -Count $env:VM_CPU_COUNT
          Add-VMDvdDrive -VMName $env:VM_NAME -Path $env:VM_OS_ISO
          Set-VMFirmware -VMName $env:VM_NAME -BootOrder (Get-VMFirmware -VMName $env:VM_NAME).BootOrder | Where-Object { $_.Device -eq "CD" }
          Start-VM -Name $env:VM_NAME
          Write-Host "VM started, așteaptă 15 minute pentru instalare"
          Start-Sleep -Seconds 900

          $rdpUser = "rdpuser"
          $rdpPass = [System.Web.Security.Membership]::GeneratePassword(16,3)

          Invoke-Command -VMName $env:VM_NAME -ScriptBlock {
            param($rdpUser, $rdpPass, $tailscaleAuthKey)
            New-LocalUser -Name $rdpUser -Password (ConvertTo-SecureString $rdpPass -AsPlainText -Force) -FullName "RDP User" -Description "User pentru RDP"
            Add-LocalGroupMember -Group "Administrators" -Member $rdpUser
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
            Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
            Invoke-WebRequest -Uri "https://tailscale.com/install.ps1" -UseBasicParsing | Invoke-Expression
            tailscale up --authkey=$tailscaleAuthKey --accept-routes
            Start-Sleep -Seconds 20
            $tailscaleIP = tailscale ip -4
            Write-Output "Tailscale IP: $tailscaleIP"
            [PSCustomObject]@{IP = $tailscaleIP; User = $rdpUser; Password = $rdpPass} | ConvertTo-Json
          } -ArgumentList $rdpUser, $rdpPass, $env:TAILSCALE_AUTHKEY -OutVariable outputResult
          $resultJson = $outputResult[-1]
          Write-Host "Informații RDP și Tailscale: $resultJson"
          $obj = $resultJson | ConvertFrom-Json
          Write-Output "::set-output name=TAILSCALE_IP::$($obj.IP)"
          Write-Output "::set-output name=RDP_USER::$($obj.User)"
          Write-Output "::set-output name=RDP_PASS::$($obj.Password)"

      - name: Rulează VM 6 ore
        shell: powershell
        run: |
          Write-Host "Rulează VM 6 ore"
          Start-Sleep -Seconds 21600

      - name: Oprește VM
        shell: powershell
        run: |
          Stop-VM -Name $env:VM_NAME -Force
          Write-Host "VM oprit."

      - name: Afișare detalii conexiune
        run: |
          echo "Tailscale IP: ${{ steps.vm.outputs.TAILSCALE_IP }}"
          echo "RDP User: ${{ steps.vm.outputs.RDP_USER }}"
          echo "RDP Parolă: ${{ steps.vm.outputs.RDP_PASS }}"
          
